Learning Git:

* Storing configurations:

	- System
		/etc/gitconfig
		Program Files\Git\etc\gitconfig
	- User
		~/.gitconfig
	- Project
		my_project/.git/config

* System
	git config --system
* User
	git config --global
* Project
	git config

# Basic cicle
	- make changes
	- add the changes
	- commit changes to the repository with a message

# project/.gitignore
# very basic regular expressions for the .gitignore file
	* ? [aeiou] [0-9]
	*.php
	file_name.txt
	!index.php
	assets/videos/
	comment lines begin with #

# Track empty folders
	.gitkeep

# parent commit
	- HEAD^, acf87504^, master^
	- HEAD~1, HEAD~
# grandparent commit
	- HEAD^^, acf87504^^, master^^
	- HEAD~2
# great-grandparent commit
	- HEAD^^^, acf87504^^^, master^^^
	- HEAD~3

git reset
	--soft
		does not change staging index or working directory
	--mixed (default)
		changes staging index to match repository
		does not change working directory
	--hard
		changes staging index and working directory to
		match repository

Commands:

# set user (global) configurations
git config --global user.name "samuraix"
git config --global user.email "ivodwvio@mail.bg"
git config --global core.editor "sublime.exe"
git config --global core.excludesfile C:/Users/samuraix/.gitignore
git config --global color.ui true

# show configurations
git config --list
git config user.name
git config user.email

# getting help in git
git help
git help log

# common
git init

git status

git add .
git add file_to_add.txt

git rm file_to_remove.txt
git rm --cached file_to_stop_tracking.txt

git mv file_name.txt file_new.txt
git mv file_name.txt new_path/file_name.txt

git diff
git diff --color-words
git diff --staged
git diff --cached
git diff file_name.txt
git diff sha
git diff sha file_name.txt
git diff sha..sha
git diff sha..sha file_name.txt
git diff --stat --summary sha..HEAD
gid diff -b
gid diff --ignore-space-change
gid diff -w
gid diff --ignore-all-space
git diff branch_one branch_two
git diff --color-words master..new_feature^

git commit -m "Message for the commint"
git commit -am "Add and commit with one command."
git commit file_name -m "Message for the commit"
git commit --amend -m "Add changes to the last commint."
git commit

git log
git log -p
git log --stat --summary
git log -n 5
git log -5
git log --format=oneline
git log --format=short
git log --format=full
git log --format=fuller
git log --format=email
git log --format=raw
git log --graph
git log --oneline --graph --all --decorate
git log --since=2012-06-15
git log --after=2012-06-15
git log --since="2 weeks ago" --until="3 days ago"
git log --since=2.weeks --until=3.days
git log --until=2012-06-16
git log --before=2012-06-16
git log --before=today
git log --author="samuraix"
git log --grep="Init"
git log --oneline
git log sha..sha
git log sha.. file_name.txt
git log branch_name --oneline -3

git checkout -- file_name.txt
git checkout SHA -- file_name.txt
git checkout new_feature
git checkout -b new_feature

git revert SHA

git reset HEAD file_name.txt
git reset --soft SHA
git reset --mixed SHA
git reset --hard SHA

git clean -n
git clean -f

git ls-tree HEAD
git ls-tree tree_sha
git ls-tree master dir_name/
git ls-tree master^ dir_name/

git show sha

git branch
git branch new_feature
git branch --merged
git branch -m new_feature new_name
git branch --move new_feature new_name
git branch -d branch_to_delete
git branch -D branch_to_delete
git branch --delete branch_to_delete

git merge new_feature
git merge --no-ff branch_name
git merge --ff-only branch_name
git merge --abort
